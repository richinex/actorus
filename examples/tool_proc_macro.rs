//! Example: Using the #[tool!] procedural macro
//!
//! This demonstrates the cleanest way to create tools using a single annotation

use actorus::tool;
use actorus::tools::{Tool, ToolResult};
use actorus::{tool_result, validate_optional_string, validate_required_string};
use anyhow::Result;
use async_trait::async_trait;
use serde_json::Value;

/// Simple greeting tool struct
pub struct GreetTool;

// Generate metadata helper using the macro
#[tool(name = "greet", description = "Greet a person with a custom message")]
impl GreetTool {}

// Now implement the Tool trait
#[async_trait]
impl Tool for GreetTool {
    // Use the auto-generated metadata helper
    fn metadata(&self) -> actorus::tools::ToolMetadata {
        Self::tool_metadata() // Generated by #[tool!] macro above
    }

    fn validate(&self, args: &Value) -> Result<()> {
        let _name = validate_required_string!(args, "name");
        Ok(())
    }

    async fn execute(&self, args: Value) -> Result<ToolResult> {
        self.validate(&args)?;

        let name = validate_required_string!(args, "name");
        let greeting = validate_optional_string!(args, "greeting", "Hello");

        let message = format!("{}, {}!", greeting, name);
        tool_result!(success: message)
    }
}

#[tokio::main]
async fn main() -> Result<()> {
    use serde_json::json;

    println!("=== Tool Procedural Macro Example ===\n");

    let tool = GreetTool;

    // Show metadata (auto-generated by #[tool!] macro)
    let metadata = tool.metadata();
    println!("Tool: {}", metadata.name);
    println!("Description: {}", metadata.description);
    println!("\nParameters:");
    for param in &metadata.parameters {
        let req = if param.required {
            "required"
        } else {
            "optional"
        };
        println!(
            "  - {} ({}): {} [{}]",
            param.name, param.param_type, param.description, req
        );
    }

    // Test execution
    println!("\n--- Test 1: With default greeting ---");
    let result = tool.execute(json!({"name": "Alice"})).await?;
    println!("Result: {}\n", result.output);

    println!("--- Test 2: With custom greeting ---");
    let result = tool
        .execute(json!({
            "name": "Bob",
            "greeting": "Hi there"
        }))
        .await?;
    println!("Result: {}\n", result.output);

    println!("--- Test 3: Missing required parameter ---");
    match tool.execute(json!({})).await {
        Ok(result) => {
            if !result.success {
                println!("Error (expected): {}\n", result.error.unwrap());
            }
        }
        Err(e) => {
            println!("Error (expected): {}\n", e);
        }
    }

    println!("=== Example Complete ===");
    println!("\nNotice: metadata() was auto-generated by #[tool!] macro!");

    Ok(())
}
